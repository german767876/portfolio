Технология разработки программного обеспечения (ТРПО) – это совокупность процессов и методов создания программного продукта. Технология разработки программного обеспечения – это система инженерных принципов для создания экономичного ПО, которое надежно и эффективно работает в реальных компьютерах. Данное определение имеет частный характер, поскольку учитывает только две из шести характеристик качества ПО – надежность и эффективность. С учетом этого можно сформулировать более общее
определение [5].
Технология разработки программного обеспечения – это
система инженерных принципов для создания экономичного ПО с заданными характеристиками качества.

Тема 1
КРАТКИЕ ТЕОРЕТИЧЕСКИЕ АСПЕКТЫ КУРСА «ТЕХНОЛОГИЯ РАЗРАБОТКИ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ»Существует множество различных процессов для создания ПО. Тем не менее, технологий, рассматривающих полный жизненный цикл проекта разработки ПО, сочетающих в себе научный подход, серьезную базу исследований и имеющих историю реального использования и адаптации, относительно немного. В СССР достижения в области производства ПО были значительно лучшими. Тому способствовали следующие объективные предпосылки:
 плановая организация производства оптимально сочеталась с каскадной моделью разработки ПО;
 контроль успешности проекта был ориентирован не на удовлетворение требований заказчика, а на удовлетворение изначально согласованного ТЗ;
 разработкой ПО занимались, как правило, высококвалифицированные специалисты в специализированных институтах;
 поскольку проекты в основном ориентировались на ВПК, бюджеты были фактически не ограниченными (по сегодняшним меркам).

1.1. Технологии
Термин «технология» – он подчеркивает аналогию между созданием программного продукта и промышленным производством. Он отражает современную тенденцию к вводу дисциплины, организации и инструментирования в такой творческий процесс, как программирование. Слово фиксирует ту точку зрения, что программирование, несмотря на интеллектуальность и творческий характер этой деятельности, нуждается в организации и регламентировании, наборе соглашений и правил, не говоря уже об инструментальном обеспечении. Сейчас это кажется тривиальным, но в 60-е годы такую точку приходилось отстаивать. разработка = анализ + проектирование + программирование (кодирование) + тестирование + отладка
Иногда сюда также включают “сопровождение”. Чтобы подчеркнуть промышленно-производственный аспект, говорят о “технологии разработки” или “технологии конструирования”.

1.2. Этапы развития
Лишь в начале 90-х Британское сообщество вычислительной техники (British Computer Society) начало присваивать разработчикам программ звание инженера. В США только в 1998 году стало возможным хоть где-то зарегистрироваться в качестве профессионального инженера программного обеспечения. Но по-прежнему, даже в начале нынешнего века, общепризнанным остается тот факт, что разработке программного обеспечения не достает достаточно развитой научной базы. Следующий шаг в развитии структурного программирования связан с введением аппарата функций, позволяющих разбивать структурную программу на обозримые по своим размерам части. При таком подходе программа пишется в терминах вызова функций верхнего уровня, которые реализуются при помощи функций более низкого уровня.

1.3. Методы проектирования
Говорят, что Генри Форд совершил революцию в производстве автомобилей, когда заметил, что узлы автомобиля можно стандартизировать, так что при сборке автомобилей данной модели можно будет использовать любой экземпляр требуемого узла. К формальным методам проектирования относятся те методы, которые основаны на математике. Формальные методы помогают решить задачи обеспечения надежности программ.

1.4. Этапы и элементы процесса разработки
9

В 80-е и 90-е в области разработки ПО преобладали две тенденции. Одна – это быстрый рост приложений, в том числе создаваемых для Web. Другая – расцвет инструментальных средств и парадигм (подходов к проектированию).
Несмотря на появление новых тенденций, основные этапы разработки ПО остались неизменными:
 Определение процесса разработки ПО;
 Управление проектом разработки;
 Описание целевого программного продукта;
 Проектирование продукта;
 Разработка продукта;
 Тестирование частей;
 Интеграция частей и тестирование продукта в целом;
 Сопровождение продукта. Процесс – способ, которым это делается. Выделяют: водопадный процесс, итеративный процесс, XP. Индивидуальный процесс разработки (Personal Software Process), командный процесс разработки (Team Software Process). Модель зрелости возможностей (Capability Maturity Model) для оценки возможностей команды разработчиков. Качество – приложения должны удовлетворять заранее определенному уровню качества. Для достижения требуемого уровня качества применяются следующие методы:
 инспектирование (процесс проверки качества, ориентированный на команды разработчиков. Он применяется на всех этапах разработки);
 формальные методы (доказательство правильности – математическое или логическое);
 тестирование;
 методы управления проектом [3, 24].

1.5. Инструментарий технологии программирования
Инструментарий технологии программирования – совокупность программ и программных комплексов, обеспечивающих технологию разработки, отладки и внедрения создаваемых программных продуктов.

1.5.1. Средства для создания приложений
 Средства для создания приложений – локальные средства, обеспечивающие выполнение отдельных видов работ по созданию программ, делятся на:
 языки и системы программирования;
 инструментальная среда пользователя.
Язык программирования – формализованный язык для описания
алгоритма решения задачи на компьютере. Они делятся на классы:
 машинные языки – языки программирования, воспринимаемые
аппаратной частью компьютера (машинные коды);
 машинно-ориентированные языки – языки программирования, которые отражают структуру конкретного типа компьютера
(ассемблеры);
 алгоритмические языки – не зависящие от архитектуры
компьютера языки программирования для отражения структуры
алгоритма (Паскаль, бейсик, Фортран и др.);
 процедурно–ориентированные языки – языки программирования,
где имеется возможность описания программы как совокупности
процедур (подпрограмм).
 проблемно–ориентированные языки – предназначены для решения
задач определенного класса (Lisp); Компилятор транслирует всю программу без ее выполнения. Трансляторы (интерпретаторы) выполняют пооперационную обработку и выполнение программы. Отладчики – специальные программы, предназначенные для трассировки и анализа выполнения других программ. Трассировка – это обеспечение выполнения в пооператорном варианте.
 Инструментальная среда пользователя – это специальные средства, встроенные в пакеты прикладных программ, такие, как:
 библиотека функций, процедур, объектов и методов обработки;
  макрокоманды;
 клавишные макросы;
 языковые макросы;
 конструкторы экранных форм и объектов;
 генераторы приложений;
 языки запросов высокого уровня;
 конструкторы меню и др.

1.5.2. Средства для создания информационных систем (Case– технология)
CASE-технология (CASE – Computer-Aided System Engineering) – программный комплекс, автоматизирующий весь технологический процесс анализа, проектирования, разработки и сопровождения сложных программных систем. Средства CASE-технологий делятся на:
 встроенные в систему реализации – все решения по проектированию и реализации привязки к выбранной СУБД;
 независимые от системы реализации – все решения по проектированию ориентированы на унификацию (определение) начальных этапов жизненного цикла программы и средств их доку­ментирования, обеспечивают большую гибкость в выборе средств реализации. Вопросы и задания для самоконтроля
 1. Что такое технология разработки ПО?
2. Что явилось предпосылкой становления дисциплины «Технология разработки ПО»? Что явилось причиной стремительного развития ПО?
3. Чем отличаются программа и программное обеспечение?
4. Достаточно ли при работе над проектом большой программной системы быть компетентным в области вычислительной техники и программировании. Почему?
 5. Можетлибольшаяпрограммнаясистемабытьотлаженадоконца и почему?
6. При каких условиях созданный программный комплекс может быть назван программным продуктом?
7. Что такое системное программное обеспечение?
8. Что такое инструментарий технологии программирования?

Тема 2
ЖИЗНЕННЫЙ ЦИКЛ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ 
1) процессы соглашения – 2;
2) процессы организационного обеспечения проекта – 5;
3) процессы проекта – 7;
4) технические процессы – 11;
5) процессыреализациипрограммныхсредств–7;
6) процессы поддержки программных средств – 8;
7) процессы повторного применения программных средств – 3.

2.1. Процессы реализации программных средств
15

Процессы реализации программных средств используются для создания конкретного элемента системы (составной части), выполненного в виде программного средства. Эти процессы преобразуют заданные характеристики поведения, интерфейсы и ограничения на реализацию в действия, результатом которых становится системный элемент, удовлетворяющий требованиям, вытекающим из системных требований. [ГОСТ Р ИСО/МЭК 12207-2010].
Примечание. В курсе «Технология разработки программного обеспечения» программное средство рассматривается ни как составная часть системы, а как независимое автономное программное обеспечение, состоящее из программных модулей [17].

2.1.1. Процесс реализации 
1) Если не оговорено в контракте, разработчик должен определить или выбрать модель жизненного цикла, соответствующую области применения, размерам и сложности проекта. Модель жизненного цикла должна содержать стадии, цели и выходы каждой стадии. Виды деятельности и задачи процесса реализации программных средств должны быть выбраны и отражены в модели жизненного цикла. 2) Исполнитель должен:
 документировать результаты в соответствии с процессом
менеджмента программной документации;
 передавать результаты в процесс менеджмента
конфигурации программных средств и выполнять
управление изменениями в соответствии с ним;
 документировать, решать проблемы и снимать несоответствия, найденные в программных продуктах и задачах в соответствии с процессом решения проблем в
программных средствах;
16

 выполнять поддержку процессов в соответствии с контрактом;
 устанавливать базовые линии и соединять элементы конфигурации в сроки, определенные приобретающей стороной и поставщиком.
3) Исполнитель должен выбирать, адаптировать и применять те стандарты, методы, инструментарий и языки программирования (если не оговорено в контракте), которые документально оформлены, являются подходящими и установлены организацией для выполнения деятельности в рамках процесса реализации программных средств и поддерживающих процессов.
4) Исполнитель должен разрабатывать планы проведения действий процесса реализации программных средств. Планы должны включать в себя конкретные стандарты, методы, инструментарий, действия и обязанности, связанные с разработкой и квалификацией всех требований, включая безопасность и защиту. При необходимости могут разрабатываться отдельные планы. Эти планы должны документироваться и выполняться.
5) При разработке или сопровождении программных продуктов могут применяться не поставляемые элементы. Однако должно гарантироваться, что функционирование и сопровождение поставляемых программных продуктов после поставки приобретающей стороне не зависит от таких элементов; другими словами, эти элементы следует также рассматривать как поставляемые. 1) определяется стратегия реализации;
2) определяются ограничения по технологии реализации проекта;
3) изготавливается программная составная часть;
4) программная составная часть упаковывается и хранится в
соответствии с соглашением о ее поставке.
Процесс реализации программных средств включает в себя
несколько специальных процессов более низкого уровня:
1) процесс анализа требований к программным средствам;
2) процесс проектирования архитектуры программных средств;
3) процесс детального проектирования программных средств;
4) процесс конструирования программных средств;
5) процесс комплексирования программных средств;
6) процесс квалификационного тестирования программных
средств.

2.1.2. Процесс анализа требований к программным средствам
Цель процесса анализа требований к программным средствам заключается в установлении и документировании требований к программному обеспечению. В результате успешного выполнения процесса определяется перечень требований к функциональным модулям программного обеспечения и их интерфейсам, определяются приоритеты реализации требований, требования к ПО оцениваются по стоимости, графикам работ и техническим воздействиям.

2.1.3. Процессы проектирования (детального проектирования) архитектуры программных средств
Цель процесса заключается в обеспечении проекта для программных средств, которые реализуются и могут быть проверены относительно требований сформулированных в ходе процесса анализа требований. В рамках процесса исполнитель осуществляет преобразование выявленных требований в архитектуру, которая описывает верхний уровень структуры программного средства и идентифицирует программные компоненты. Исполнитель должен разработать проект, описывающий внешние и внутренние интерфейсы, структуру и метод доступа к базе данных (БД), так же исполнитель оформляет предварительные версии пользовательской документации и требования к предварительному тестированию.

2.1.4. Процесс конструирования программных средств
Целью процесса является создание исполняемых программных блоков (модулей), которые созданы на основе архитектурного проекта. При реализации процесса исполнитель разрабатывает документацию на каждый программный модуль и базу данных, процедуры и данные для тестирования модулей и базы данных.

2.1.5. Процесс комплексирования программных средств
В ходе процесса комплексирования программных средств осуществляется объединение функциональных программных модулей, создание интегрированных программных элементов, согласованных с проектом программного средства, которые демонстрируют, что функциональные и нефункциональные требования к программному средству удовлетворяются.

2.1.6. Процесс квалификационного тестирования программного средства
Цель процесса квалификационного тестирования программного средства заключается в подтверждении того, что комплектованный программный продукт удовлетворяет установленным требованиям. В рамках процесса исполнитель должен провести квалификационное тестирование (согласно требованиям).

Тема 3
МОДЕЛИ И МЕТОДОЛОГИИ РАЗРАБОТКИ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ
Процесс жизни любой системы или программного продукта может быть описан посредством модели жизненного цикла, состоящей из стадий. Модели могут использоваться для представления всего жизненного цикла от замысла до прекращения применения или для представления части жизненного цикла, соответствующей текущему проекту.

3.1. Модели жизненного цикла программного обеспечения
Под моделью жизненного цикла ПО понимается структура, определяющая последовательность выполнения и взаимосвязи процессов, действий и задач на протяжении ЖЦ. Модель ЖЦ зависит от спецификации, масштаба и сложности проекта и спецификации условий, в которых система создается и функционирует. 

3.1.1. Каскадная модель
Первой моделью, получившей широкую известность и действительно структурирующей процесс разработки, является каскадная (водопадная) модель. Каждая стадия каскадной модели заканчивается получением некоторых результатов, которые служат в качестве исходных данных для следующей стадии. Требования к разрабатываемому ПО, определенные на стадии формирования требований, строго документируются в виде технического задания и фиксируются на все время разработки проекта.

3.1.2. V-образная модель, как разновидность каскадной модели
Основной принцип V-образной модели заключается в том, что детализация проекта возрастает при движении слева направо, одновременно с течением времени, и ни то, ни другое не может повернуть вспять. Итерации в проекте производятся по горизонтали, между левой и правой сторонами буквы.

3.1.3. Итеративный инкрементный подход к разработке (эволюционная модель)
3.1.3.1 Итеративная модель
Итеративная модель предполагает разбиение жизненного цикла проекта на последовательность итераций, каждая из которых напоминает «мини-проект», включая все фазы жизненного цикла в применении к созданию меньших фрагментов функциональности, по сравнению с проектом, в целом. Цель каждой итерации – получение работающей версии программной системы, включающей функциональность, определенную интегрированным содержанием всех предыдущих и текущей итерации. Результата финальной итерации содержит всю требуемую функциональность продукта. Таким образом, с завершением каждой итерации, продукт развивается инкрементально.

3.1.3.2 Инкрементная модель
Идея, лежащая в основе инкрементной модели, состоит в том, что программную систему следует разрабатывать по принципу приращений, так, чтобы разработчик мог использовать данные, полученные при разработке более ранних версий ПО. Новые данные получаются как в ходе разработки ПО, так и в ходе его использования, где это возможно. Ключевые этапы этого процесса – простая реализация подмножества требований к программе и совершенствование модели в серии последовательных релизов до тех пор, пока не будет реализовано ПО во всей полноте. В ходе каждой итерации организация модели изменяется, и к ней добавляются новые функциональные возможности.

3.1.4. Спиральная модель, как разновидность эволюционной модели
В середине 1980-x годов Барри Боэм предложил свой вариант итерационной модели итеративной модели под названием «Спиральная модель». При использовании спиральной модели прикладное ПО создается в несколько итераций (витков спирали) методом прототипирования. Создание прототипов осуществляется в несколько итераций, или витков спирали. Отличительной особенностью этой модели является специальное внимание рискам, влияющим на организацию жизненного цикла. Боэм формулирует 10 наиболее распространенных (по приоритетам) рисков:
 дефицит специалистов;
 нереалистичные сроки и бюджет;
 реализация несоответствующей функциональности;
 разработка неправильного пользовательского интерфейса;
 «золотая сервировка», перфекционизм, ненужная оптимизация и
оттачивание деталей;
 непрекращающийся поток изменений;
 нехватка информации о внешних компонентах, определяющих
окружение системы или вовлеченных в интеграцию;
 недостатки в работах, выполняемых внешними (по отношению к
проекту) ресурсами;
 недостаточная производительность получаемой системы;
 «разрыв» в квалификации специалистов разных областей знаний.

Отличительной особенностью этой модели является специальное внимание рискам, влияющим на организацию жизненного цикла. Боэм формулирует 10 наиболее распространенных (по приоритетам) рисков:
 дефицит специалистов;
 нереалистичные сроки и бюджет;
 реализация несоответствующей функциональности;
 разработка неправильного пользовательского интерфейса;
 «золотая сервировка», перфекционизм, ненужная оптимизация и
оттачивание деталей;
 непрекращающийся поток изменений;
 нехватка информации о внешних компонентах, определяющих
окружение системы или вовлеченных в интеграцию;
 недостатки в работах, выполняемых внешними (по отношению к
проекту) ресурсами;
 недостаточная производительность получаемой системы;
 «разрыв» в квалификации специалистов разных областей знаний.

3.2.1. RUP (Rational Unified Process)
Один из самых известных процессов, использующих итеративную модель разработки – RUP. Он был создан во второй половине 1990-x годов в компании Rational Software. Термином RUP обозначает как методологию, так и продукт компании IBM (ранее Rational) для управления процессом разработки. Методология RUP описывает абстрактный общий процесс, на основе которого организация или проектная команда должна создать специализированный процесс, ориентированный на ее потребности.

3.2.1.1 Архитектура
Можно сказать, что RUP – ориентированная на архитектуру методология. Считается, что реализация и тестирование архитектуры системы должны начинаться на самых ранних стадиях проекта. RUP использует понятие исполняемой архитектуры (executable architecture) – основы приложения, позволяющей реализовать архитектурно значимые прецеденты использования.

3.2.1.2 Жизненный цикл проекта
Жизненный цикл проекта RUP состоит из четырех фаз. Последовательность этих фаз фиксирована, но число итераций, необходимых для завершения каждой фазы, определяется индивидуально для каждого конкретного проекта. Фазы RUP нельзя отождествлять с фазами водопадной модели – их назначение и содержание принципиально различны.

Начало (Inception)
Стадия «начало» обычно состоит из одной итерации. В ходе выполнения этой стадии необходимо:
 определить видение и границы проекта;
 создать экономическое обоснование;
 идентифицировать большую часть прецедентов использования и
подробно описать несколько ключевых прецедентов;
 найти хотя бы одно возможное архитектурное решение;
 оценить бюджет, график и риски проекта.

Проектирование (Elaboration)
В результате выполнения этой стадии на основе требований и рисков проекта создается основа архитектуры системы. Проектирование может занимать до двух-трех итераций или быть полностью пропущенным (если в проекте используется архитектура существующей системы без изменений). Целями этой фазы являются:
 детальное описание большей части прецедентов использования;
 создание оттестированной (при помощи архитектурно значимых
прецедентов использования) базовой архитектуры;
 снижение основных рисков и уточнение бюджета и графика
проекта.

Построение (Construction)
В этой стадии (длящейся от двух до четырех итераций) происходит разработка окончательного продукта. Вовремя ее выполнения создается основная часть исходного кода системы и выпускаются промежуточные демонстрационные прототипы.
Внедрение (Transition)
Целями стадии «внедрения» являются проведение бета- тестирования и тренингов пользователей, исправление обнаруженных дефектов, развертывание системы на рабочей площадке, при необходимости – миграция данных. Кроме того, на этой стадии выполняются задачи, необходимые для проведения маркетинга и продаж.

3.2.2. Microsoft Solutions Framework (MSF)
Данная методология описывает подход и организацию работы при создании программных продуктов. Подробно про методологию MSF вы можете прочитать в переводе Microsoft Solutions Frameworks for Agile Software Development, которая входит в поставку Microsoft Team Foundation Server [23].

3.2.3. Scrum
Scrum предоставляет эмпирический подход к разработке ПО. Этот процесс быстр, адаптивен, умеет подстраиваться и отличен от каскадной модели. Scrum основан на повторяющихся циклах, это делает его более гибким и предсказуемым.

Scrum Мастер - самая важная роль в методологии. Scrum Мастер отвечает за успех Scrum в проекте. Как правило, эту роль в проекте играет менеджер проекта или лидер команды (Team Leader). Важно подчеркнуть, что Scrum Мастер не раздает задачи членам команды. В Scrum команда является самоорганизующейся и самоуправляемой.
Основные обязанности Scrum Мастера таковы:
 создает атмосферу доверия,
 участвует в митингах в качестве фасилитатора - человека,
обеспечивающий успешную групповую коммуникацию
 устраняет препятствия
 делает проблемы и открытые вопросы видимыми
 отвечает за соблюдение практик и процесса в команде

3.2.4. Экстремальное программирование (eXtreme Programming)
Методология XP, разработанная Кентом Беком (Kent Beck), Уордом Каннингемом (Ward Cunningham) и Роном Джеффрисом (Ron Jeffries), является сегодня одной из самых популярных гибких методологий. Она описывается как набор практик: игра в планирование, короткие релизы, метафоры, простой дизайн, переработки кода (refactoring), разработка «тестами вперед», парное программирование, коллективное владение кодом, 40-часовая рабочая неделя, постоянное присутствие заказчика и стандарты кода.
Интерес к XP рос снизу вверх – от разработчиков и тестировщиков, замученных тягостным процессом, документацией, метриками и прочим формализмом. Они не отрицали дисциплину, но не желали бессмысленно соблюдать формальные требования и искали новые быстрые и гибкие подходы к разработке высококачественных программ.

3.2.5. Crystal Clear
Легковесная гибкая методология, созданная Алистером Коуберном, которая предназначена для небольших команд в 6-8 человек для разработки некритичных бизнес-приложений. Как и все гибкие методологии, Crystal Clear больше опирается на людей, чем на процессы и артефакты. Crystal Clear использует семь методов/практик, три из которых являются обязательными:
 частая поставка продукта;
 улучшения через рефлексию;
 личные коммуникации;
 чувство безопасности;
 фокусировка;
 простой доступ к экспертам;
 качественное техническое окружение.

Тема 4
КАЧЕСТВО ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ
 Процессы разработки, приобретения и внедрения сложных систем, к которым относятся в частности программные комплексы, должны находиться под жестким управленческим контролем. В настоящее время практически во всех организациях обеспечивается контроль важнейших характеристик, связанных с производством и использованием программных продуктов, таких как время, финансовые средства, ресурсы
 и т.п.

4.2. Концепция и сущность управления качеством ПС
Основное содержание концепции управления качеством сводится к следующим положениям:
 требования к уровню качества по каждому фактору определяют базовым значением показателя качества;
 требуемый уровень качества обеспечивается процессом и в процессе производства;
 измерение, оценка и контроль уровня качества производится на всех стадиях жизненного цикла;
 управление качеством есть непрерывный, информационный и целенаправленный процесс воздействия на программы и документацию, а также на коллективы разработчиков ПС в целях обеспечения требуемого качества при изменяющихся внешних и внутренних условиях путем принятия управленческих решений.

4.3. Роль стандартизации и сертификации в управлении качеством ПС
Одним из краеугольных камней современного управления качеством является стандартизация. По определению Международной организации по стандартизации (ISO) стандартизация представляет собой «процесс установления и применения правил с целью упорядочения в данной области на пользу и при участии всех заинтересованных сторон, в частности, для достижения всеобщей максимальной экономии с соблюдением функциональных условий и требований безопасности».

Тема 5
МЕТОДЫ ВЫЯВЛЕНИЯ ТРЕБОВАНИЙ К ПО. УРОВНИ ТРЕБОВАНИЙ. АНАЛИЗ ТРЕБОВАНИЙ К ПО
 Цель анализа требований в проектах – получить максимум информации о заказчике и специфике его задач, уточнить рамки проекта, оценить возможные риски, а также сформировать проектную группу, на которую будет возложена значительная часть предстоящих работ.

5.1. Особенности интерпретации требований
 IEEE Standard Glossary of Software Engineering Terminology
 (1990) определяет требования как:
1. Условия или возможности, необходимые пользователю для
решения проблем или достижения целей;
2. Условия или возможности, которыми должна обладать система
или системные компоненты, чтобы выполнить контракт или удовлетворять стандартам, спецификациям или другим формальным документам;
3. Документированное представление условий или возможностей для пунктов 1 и 2.
Это определение охватывает требования как пользователей (внешнее поведение системы), так и разработчиков (некоторые скрытые параметры). Термин пользователи следует распространить на всех заинтересованных лиц, так как не все, кто заинтересован в проекте – пользователи.
Требования – это спецификация того, что должно быть реализовано. В них описано поведение системы, свойства системы или ее атрибуты. Они могут быть ограничены процессом разработки системы.
Уровни требований.
Три уровня требований к ПО:
  бизнес-требования;
 требования пользователей;
 функциональные требования.

5.2. Типы требований.
 Каждая система имеет свои функциональные и нефункциональные требования.
Бизнес-требования (business requirements) содержат высокоуровневые цели организации или заказчиков системы. Как правило, их высказывают те, кто финансируют проект, покупатели системы, менеджер реальных пользователей, отдел маркетинга. Требования пользователей (user requirements) описывают цели и задачи, которые пользователям позволит решить система. К отличным способам представления этого вида требований относятся варианты использования, сценарии и таблицы «событие – отклик». Таким образом,
 в этом документе указано, что клиенты смогут делать с помощью системы.
Функциональные требования (functional requirements)
определяют функциональность ПО, которую разработчики должны построить, чтобы пользователи смогли выполнить свои задачи в рамках бизнес-требований. Иногда именуемые требованиями поведения (behavioral requirements), они содержат положения с традиционным «должен» или «должна»: «Система должна по электронной почте отправлять пользователю подтверждение о заказе».

5.3. Приемы формулирования требований
 Обучение аналитиков требований. Всем членам команды, которые будут исполнять функции аналитиков, необходимо научиться приемам формулирования требований – это может занять несколько дней. Квалифицированный аналитик требований терпелив и методичен, обладает навыками межличностного общения и коммуникативными навыками, сведущ в предметной области и знает множество способов формулирования требований к ПО. Ознакомление пользователей и менеджеров с требованиями.
Пользователи, которые будут принимать участие в разработке ПО, должны пройти непродолжительный тренинг (один-два дня), чтоб научиться формулировать требования. Он полезен и для менеджеров по разработке и по работе с клиентами. Обучение поможет понять особое значение выделения требований, суть процесса их разработки, а также опасность пренебрежения ими. Посетив мои семинары по требованиям, некоторые пользователи замечали, что стали теплее относиться к разработчикам ПО.

5.4. Выявление требований
 Определение процесса формулирования требований.
Документация этапов выявления, анализа, определения и проверки требований. Наличие инструкций по выполнению ключевых операций поможет аналитикам качественно и согласованно выполнить их работу. Кроме того, будет проще поставить задачи по созданию требований и
 графики, а также продумать необходимые ресурсы.
Определение образа и границы проекта. Документ об образе и
границах проекта содержит бизнес-требования к продукту. Описание образа проекта позволит всем заинтересованным лицам в общих чертах понять назначение продукта. Границы проекта определяют, что следует реализовать в этой версии, а что – в следующих. Образ и границы проекта – хорошая база для оценки предлагаемых требований, Образ продукта должен оставаться от версии к версии относительно стабильным, но для каждого выпуска необходимо составлять отдельный документ о границах.

5.5. Анализ требований
 Создание контекстной диаграммы. Контекстная диаграмма – простая модель анализа, отображающая место новой системы в соответствующей среде. Она определяет границы и интерфейсы между разрабатываемой системой и сущностями, внешними для этой системы, например пользователями, устройствами и прочими информационными системами.Создание пользовательского интерфейса и технических прототипов. Если разработчики или пользователи не совсем уверены насчет требований, создайте прототип – частичную, возможную или предварительную версию продукта, которая сделает концепции и возможности более осязаемыми. Оценка прототипа поможет всем заинтересованным лицам достичь взаимопонимания по решаемой проблеме.

5.6. Спецификации требований
 Использование шаблона спецификации требований к ПО.
Создайте стандартный шаблон для документирования требований к ПО в вашей организации. Шаблон предоставляет согласованную структуру, позволяющую фиксировать описания нужной функциональности, а также прочую информацию, касающуюся требований. Вместо того чтобы изобретать новый шаблон, модифицируйте один из существующих в соответствии со спецификой проекта. Многие компании начинают с использования шаблона спецификации требований к ПО, описанного в стандарте IEEE 830-1998 (IEEE, 1998b). Если ваша компания занимается разными проектами, например, проектирует новое крупное приложение и параллельно дорабатывает версии старых программ, создайте соответствующие шаблоны для всех типов проектов.
 Шаблоны и процессы должны быть масштабируемыми.

5.7. Проверка требований
 Изучение документов с требованиями. Официальная проверка документирования требований – один из наиболее ценных способов проверки качества ПО. Соберите небольшую команду, члены которой
 представляют различные направления (например, аналитик, клиент, разработчик и специалист по тестированию}, и тщательно изучите спецификацию требований к ПО, модель анализа и соответствующую информацию на предмет недостатков. Также полезно провести в ходе формулирования требований их неофициальный предварительный просмотр. И хотя реализовать это на практике непросто, данный прием – один из самых ценных, так что начинайте внедрять проверку требований в вашей организации прямо сейчас.

5.8. Управление требованиями
 Определение процесса управления изменениями. Определите процесс представления, анализа и утверждения или отклонения изменений. Применяйте его для управления всеми предлагаемыми изменениями. В контексте процесса управления изменениями полезно использовать коммерческие средства отслеживания недостатков.
Создание совета по управлению изменениями. Из представителей заинтересованных в проекте лиц организуйте совет по управлению изменениями, который будет получать информацию о предполагаемых изменениях требований, оценивать ее, решать, какие изменения принять, а какие отклонить, и определять, в какой версии продукта будет внедрена та или иная функция.

5.9. Управление проектом
Выбор цикла разработки ПО. Вашей компании следует определить несколько жизненных циклов разработки для проектов различного типа и различных степеней неопределенности требований (McCormel, 1996). Каждый менеджер проекта должен выбрать и использовать цикл, оптимальным образом подходящий для его проекта. Включите цикл операции по созданию требований. Если на ранних этапах работы над проектом требования или границы проекта определены нечетко, разрабатывайте продукт постепенно (небольшими этапами), начиная с наиболее понятных требований и устойчивых
 элементов архитектуры. По возможности реализуйте наборы функций, чтобы периодически выпускать промежуточные версии продукта и как можно раньше предоставлять клиенту работоспособные образцы приложение (Gilb, 1988; Cockburn, 2002).